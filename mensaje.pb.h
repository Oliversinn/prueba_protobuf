// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mensaje.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mensaje_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mensaje_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mensaje_2eproto;
namespace chat {
class Mensaje;
class MensajeDefaultTypeInternal;
extern MensajeDefaultTypeInternal _Mensaje_default_instance_;
class MiInfoRequest;
class MiInfoRequestDefaultTypeInternal;
extern MiInfoRequestDefaultTypeInternal _MiInfoRequest_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::Mensaje* Arena::CreateMaybeMessage<::chat::Mensaje>(Arena*);
template<> ::chat::MiInfoRequest* Arena::CreateMaybeMessage<::chat::MiInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

// ===================================================================

class MiInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.MiInfoRequest) */ {
 public:
  MiInfoRequest();
  virtual ~MiInfoRequest();

  MiInfoRequest(const MiInfoRequest& from);
  MiInfoRequest(MiInfoRequest&& from) noexcept
    : MiInfoRequest() {
    *this = ::std::move(from);
  }

  inline MiInfoRequest& operator=(const MiInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiInfoRequest& operator=(MiInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MiInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MiInfoRequest* internal_default_instance() {
    return reinterpret_cast<const MiInfoRequest*>(
               &_MiInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MiInfoRequest& a, MiInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MiInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MiInfoRequest* New() const final {
    return CreateMaybeMessage<MiInfoRequest>(nullptr);
  }

  MiInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MiInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MiInfoRequest& from);
  void MergeFrom(const MiInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MiInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.MiInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:chat.MiInfoRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// -------------------------------------------------------------------

class Mensaje :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.Mensaje) */ {
 public:
  Mensaje();
  virtual ~Mensaje();

  Mensaje(const Mensaje& from);
  Mensaje(Mensaje&& from) noexcept
    : Mensaje() {
    *this = ::std::move(from);
  }

  inline Mensaje& operator=(const Mensaje& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mensaje& operator=(Mensaje&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mensaje& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mensaje* internal_default_instance() {
    return reinterpret_cast<const Mensaje*>(
               &_Mensaje_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mensaje& a, Mensaje& b) {
    a.Swap(&b);
  }
  inline void Swap(Mensaje* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mensaje* New() const final {
    return CreateMaybeMessage<Mensaje>(nullptr);
  }

  Mensaje* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mensaje>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mensaje& from);
  void MergeFrom(const Mensaje& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mensaje* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.Mensaje";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mensaje_2eproto);
    return ::descriptor_table_mensaje_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
    kMiInfoReqFieldNumber = 2,
  };
  // required string option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  const std::string& option() const;
  void set_option(const std::string& value);
  void set_option(std::string&& value);
  void set_option(const char* value);
  void set_option(const char* value, size_t size);
  std::string* mutable_option();
  std::string* release_option();
  void set_allocated_option(std::string* option);
  private:
  const std::string& _internal_option() const;
  void _internal_set_option(const std::string& value);
  std::string* _internal_mutable_option();
  public:

  // optional .chat.MiInfoRequest miInfoReq = 2;
  bool has_miinforeq() const;
  private:
  bool _internal_has_miinforeq() const;
  public:
  void clear_miinforeq();
  const ::chat::MiInfoRequest& miinforeq() const;
  ::chat::MiInfoRequest* release_miinforeq();
  ::chat::MiInfoRequest* mutable_miinforeq();
  void set_allocated_miinforeq(::chat::MiInfoRequest* miinforeq);
  private:
  const ::chat::MiInfoRequest& _internal_miinforeq() const;
  ::chat::MiInfoRequest* _internal_mutable_miinforeq();
  public:

  // @@protoc_insertion_point(class_scope:chat.Mensaje)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_;
  ::chat::MiInfoRequest* miinforeq_;
  friend struct ::TableStruct_mensaje_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MiInfoRequest

// required string username = 1;
inline bool MiInfoRequest::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MiInfoRequest::has_username() const {
  return _internal_has_username();
}
inline void MiInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.MiInfoRequest.username)
  return _internal_username();
}
inline void MiInfoRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:chat.MiInfoRequest.username)
}
inline std::string* MiInfoRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:chat.MiInfoRequest.username)
  return _internal_mutable_username();
}
inline const std::string& MiInfoRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void MiInfoRequest::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MiInfoRequest::set_username(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MiInfoRequest.username)
}
inline void MiInfoRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MiInfoRequest.username)
}
inline void MiInfoRequest::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MiInfoRequest.username)
}
inline std::string* MiInfoRequest::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MiInfoRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.MiInfoRequest.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MiInfoRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.MiInfoRequest.username)
}

// required string ip = 2;
inline bool MiInfoRequest::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MiInfoRequest::has_ip() const {
  return _internal_has_ip();
}
inline void MiInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MiInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:chat.MiInfoRequest.ip)
  return _internal_ip();
}
inline void MiInfoRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:chat.MiInfoRequest.ip)
}
inline std::string* MiInfoRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:chat.MiInfoRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& MiInfoRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MiInfoRequest::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MiInfoRequest::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.MiInfoRequest.ip)
}
inline void MiInfoRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MiInfoRequest.ip)
}
inline void MiInfoRequest::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MiInfoRequest.ip)
}
inline std::string* MiInfoRequest::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MiInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:chat.MiInfoRequest.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MiInfoRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:chat.MiInfoRequest.ip)
}

// -------------------------------------------------------------------

// Mensaje

// required string option = 1;
inline bool Mensaje::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mensaje::has_option() const {
  return _internal_has_option();
}
inline void Mensaje::clear_option() {
  option_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mensaje::option() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.option)
  return _internal_option();
}
inline void Mensaje::set_option(const std::string& value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:chat.Mensaje.option)
}
inline std::string* Mensaje::mutable_option() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.option)
  return _internal_mutable_option();
}
inline const std::string& Mensaje::_internal_option() const {
  return option_.GetNoArena();
}
inline void Mensaje::_internal_set_option(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Mensaje::set_option(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.Mensaje.option)
}
inline void Mensaje::set_option(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Mensaje.option)
}
inline void Mensaje::set_option(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  option_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Mensaje.option)
}
inline std::string* Mensaje::_internal_mutable_option() {
  _has_bits_[0] |= 0x00000001u;
  return option_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mensaje::release_option() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.option)
  if (!_internal_has_option()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return option_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mensaje::set_allocated_option(std::string* option) {
  if (option != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  option_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option);
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.option)
}

// optional .chat.MiInfoRequest miInfoReq = 2;
inline bool Mensaje::_internal_has_miinforeq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || miinforeq_ != nullptr);
  return value;
}
inline bool Mensaje::has_miinforeq() const {
  return _internal_has_miinforeq();
}
inline void Mensaje::clear_miinforeq() {
  if (miinforeq_ != nullptr) miinforeq_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::chat::MiInfoRequest& Mensaje::_internal_miinforeq() const {
  const ::chat::MiInfoRequest* p = miinforeq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chat::MiInfoRequest*>(
      &::chat::_MiInfoRequest_default_instance_);
}
inline const ::chat::MiInfoRequest& Mensaje::miinforeq() const {
  // @@protoc_insertion_point(field_get:chat.Mensaje.miInfoReq)
  return _internal_miinforeq();
}
inline ::chat::MiInfoRequest* Mensaje::release_miinforeq() {
  // @@protoc_insertion_point(field_release:chat.Mensaje.miInfoReq)
  _has_bits_[0] &= ~0x00000002u;
  ::chat::MiInfoRequest* temp = miinforeq_;
  miinforeq_ = nullptr;
  return temp;
}
inline ::chat::MiInfoRequest* Mensaje::_internal_mutable_miinforeq() {
  _has_bits_[0] |= 0x00000002u;
  if (miinforeq_ == nullptr) {
    auto* p = CreateMaybeMessage<::chat::MiInfoRequest>(GetArenaNoVirtual());
    miinforeq_ = p;
  }
  return miinforeq_;
}
inline ::chat::MiInfoRequest* Mensaje::mutable_miinforeq() {
  // @@protoc_insertion_point(field_mutable:chat.Mensaje.miInfoReq)
  return _internal_mutable_miinforeq();
}
inline void Mensaje::set_allocated_miinforeq(::chat::MiInfoRequest* miinforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete miinforeq_;
  }
  if (miinforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      miinforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, miinforeq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  miinforeq_ = miinforeq;
  // @@protoc_insertion_point(field_set_allocated:chat.Mensaje.miInfoReq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mensaje_2eproto
